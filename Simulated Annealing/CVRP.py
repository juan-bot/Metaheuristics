import math
import random as rd
import numpy as np
from time import time
T=5
L=20
#sAct= np.array([2, 4, 6, 1, 3, 5,7])
sAct=np.arange(1,1001,dtype=int)
np.random.shuffle(sAct)
sCand=sAct
R=0.6
contG=0
#CVRP variables
best_route=0
origin = 0
vehicles = 10
locations = 30
equilibrio1 = 1000
equilibrio2 = 1000
alpha = 0.995
best_sol=1e20
distances = np.zeros((locations,locations))
capacities = np.zeros(vehicles)
demands = np.zeros(locations)
k=1.380649*pow(10,-23)

demands=[0,5, 7, 4, 4, 5, 9, 6, 9, 8, 3, 1, 3, 7, 8, 9, 4, 2, 10, 5, 1, 9, 4, 3, 6, 4, 1, 9, 2, 2]
capacities=[30,30,30,30,30,30,30,30,30,30]


distances=[
        [
            0, 548, 776, 696, 582, 274, 502, 194, 308, 194, 536, 502, 388, 354, 234,
            468, 776, 662, 345, 231, 975, 563, 1345, 1543, 2342, 532, 741, 356, 698, 34 #1
        ],
        [
            7629, 0, 2605, 3032, 9819, 5252, 6940, 9500, 8970, 3047, 5856, 4208, 5527, 6039, 7082,
            7767, 6871, 3247, 7945, 7567, 8792, 6566, 1406, 5212, 4774, 4831, 8725, 9886, 8624, 5954 #2
        ],
        [
            776, 684, 0, 992, 878, 502, 274, 810, 468, 742, 400, 1278, 1164, 234, 1234,
            1130, 788, 1552, 754,657 , 696, 582, 274, 502, 194, 308, 194, 536, 502, 388 #3
        ],
        [
            696, 308, 992, 0, 114, 650, 878, 502, 844, 890, 1232, 514, 628, 822, 366,
            1164, 560, 1358,2143,1179,3976, 150,1098,2107,3104,2726, 629,3482,3677,3132 #4
        ],
        [
            582, 194, 878, 114, 0, 536, 764, 388, 730, 776, 1118, 400, 514, 708,4988,
            1050, 674, 1244 ,4681,1396,1467,3997,3884,4215,1936,1796,4824,2928,1575,3507#5
        ],
        [
            274, 502, 502, 650, 536, 0, 228, 308, 194, 240, 582, 776, 662, 628, 345,
            514, 1050, 708,  948, 992,4570, 350,2588,2401,2278,2799,2944,1915,1434,3849 #6
        ],
        [
            502, 730, 274, 878, 764, 228, 0, 536, 194, 468, 354, 1004, 890, 856,1231,
            514, 1278, 480, 1179,3976, 150,1098,2107,3104,2726, 629,3482,3677,3132, 366 #7
        ],
        [
            194, 354, 810, 502, 388, 308, 536, 0, 342, 388, 730, 468, 354, 320, 1213,
            662, 742, 856, 1003,1454,4447,3125, 677, 835, 868,1013,2247,2127, 180,4150 #8
        ],
        [
            308, 696, 468, 844, 730, 194, 194, 342, 0, 274, 388, 810, 696, 662,4363,
            320, 1084, 514, 620,4262, 858,4767,2910,1777,4624,3483, 872,4143, 619,1869 #9
        ],
        [
            194, 742, 742, 890, 776, 240, 468, 388, 274, 0, 342, 536, 422, 388,5443,
            274, 810, 468, 227,3166,1360,2735,4871,4438,4348,3060,2559,1790,3515,2985  #10
        ],
        [
            536, 1084, 400, 1232, 1118, 582, 354, 730, 388, 342, 0, 878, 764, 235,730,
            388, 1152, 354, 4535,3159, 230, 353,4667,4666,3787,1017, 505,2109,3992,4048 #11
        ],
        [
            502, 594, 1278, 514, 400, 776, 1004, 468, 810, 536, 878, 0, 114,976,308,
            650, 274, 844, 2159,1195,3327,4999,4279,3232,1588,1411, 773,3742,3386, 795 #12
        ],
        [
            388, 480, 1164, 628, 514, 662, 890, 354, 696, 422, 764, 114, 0, 194,1241,
            536, 388, 730, 2419,4014,1382,1965,3340,2342,4702,1023,2074,3843,3126,4831 #13
        ],
        [
            354, 674, 1130, 822, 708, 628, 856, 320, 662, 388, 730, 308, 194, 0, 563,
            342, 422, 536, 2595,3113,1138,4698,3966, 249,3256,3571,4981,4690, 719,4328 #14
        ],
        [
            468, 1016, 788, 1164, 1050, 514, 514, 662, 320, 274, 388, 650, 536, 123,0,
            2344, 764, 194, 1018,1618,1821,1785,1140,4902,3808,3416,1339,3963,4791,1907 #15
        ],
        [
            776, 868, 1552, 560, 674, 1050, 1278, 742, 1084, 810, 1152, 274,213,
            388, 422, 0, 764, 798,1699,3114,2427,4431,2870,1123,1694,1861,4452,2744,4111,1413 #16
        ],
        [
            662, 1210, 754, 1358, 1244, 708, 480, 856, 514, 468, 354, 844, 730,512,
            536, 194, 0, 110, 4107,4914,4949,4225,1957,1691,2454,3366,3318,2820,4894,2514  #17 
        ],
        [
            776, 868, 1552, 560, 674, 1050, 1278, 742, 1084, 810, 1152, 274,456,
            388, 422, 764, 124, 0, 2739,4820,3981,3072,1043,1831,2186,1377,3230,2811,3267,4744 #18
        ],
        [
           8036, 3221, 8487, 2973, 5936, 3902, 8901, 4894, 3797, 241, 7233, 8759, 8657, 3888, 2069, 2155, 
           6145, 1290, 4429, 8667, 3694, 4607, 9657, 5349, 6871, 686, 6691, 8079, 3386, 7744 #19
        ],  
        [
            5415, 1355, 8181, 8186, 6829, 5315, 8727, 60, 3510, 8963, 8204, 5840, 9998, 6361, 3095,
            150, 4386, 2752, 2529, 0, 2772, 4369, 6685, 3102, 6609, 6218, 2867, 5815, 9040, 7983#20
        ],
        [
            7738, 3392, 9455, 2742, 9132, 2298, 3365, 2101, 4932, 7037, 908, 1364, 9402, 6708, 9458,
            8945, 1061, 6270, 2969, 9747, 0, 4231, 6998, 4345, 1947, 3210, 5786, 2217, 1208, 8165 #21
        ], #Aqui me quede xD
        [
            684, 1671, 8470, 7191, 6858, 9842, 6583, 3269, 9703, 9231, 4305, 1042, 771, 8285, 8246, 
            7482, 6823, 8657, 6860, 810, 9315, 0, 5301, 9196, 1642, 7090, 2772, 1683, 3977, 7404 #22
        ],
        [
            23, 6847, 9149, 9724, 3332, 1332, 1665, 9829, 3202, 3462, 3581, 3600, 3056, 9361, 4848, 
            5779, 7602, 2245, 2835, 611, 7117, 4951, 0, 7775, 3834, 9394, 464, 6434, 9392, 392 #23
        ],
        [
            9587, 5008, 7488, 5849, 3940, 343, 6446, 7670, 7603, 8956, 4178, 749, 2671, 4358, 3536, 
            1816, 9735, 169, 2506, 8212, 7069, 685, 390, 0, 9389, 2894, 1789, 9990, 327, 7787 #24
        ],
        [
            3272, 8113, 4440, 6813, 4236, 2271, 2384, 7574, 3144, 3723, 4869, 2366, 9483, 7393, 3834, 
            9351, 5755, 3550, 5605, 2095, 7093, 9984, 3443, 3250, 0, 3091, 2878, 5944, 305, 2502 #25
        ],
        [
            2998, 5478, 7295, 3084, 9587, 9581, 279, 2624, 2820, 1514, 4472, 8223, 7877, 6052, 457, 
            7143, 3277, 8626, 7704, 8835, 396, 514, 1886, 8951, 1246, 0, 4373, 5666, 1154, 7312 #26
        ],
        [
            8878, 5530, 6520, 195, 8103, 1379, 4336, 4549, 8386, 4275, 8301, 5614, 6015, 5703, 9326, 
            4314, 1834, 761, 8138, 4557, 4322, 7321, 2320, 201, 5586, 2776, 0, 2843, 1547, 6812 #27
        ],
        [
            5439, 9661, 4607, 1656, 5916, 343, 558, 8782, 8607, 5726, 7894, 9883, 6728, 6087, 4027, 
            9131, 8326, 9394, 9501, 2820, 6313, 3081, 5302, 7140, 3520, 8232, 2515, 0, 1078, 3019 #28
        ],
        [
           4679, 6175, 8494, 1991, 9847, 3918, 491, 1872, 7341, 4985, 7543, 3823, 4223, 7202, 5394, 
           1777, 3266, 8399, 4197, 2800, 6768, 504, 3543, 6996, 8371, 4824, 7589, 5512, 0, 6928 #29
        ],
        [
            1280, 4341, 8809, 3427, 7835, 3694, 5699, 7599, 2793, 7317, 2593, 7572, 6385, 3914, 9118, 
            748, 6692, 6379, 2555, 6566, 7847, 7268, 7729, 8517, 4930, 6028, 6338, 4016, 6537, 0 #30
        ]
    ]
vis = np.zeros(locations+1)
M = np.zeros(vehicles)

def g(temp):
    global alfa
    return temp*alfa

#
def probability(temp, delta):
    return np.exp(-(-delta/temp))

def Costo( solution):
    global origin
    global distances
    global demands
    global capacities
    cost = 0
    for i in range(vehicles):
        fill = 0
        ant = origin
        for j in solution[i]:
            cost += distances[ant][j]
            ant = j
            fill += demands[j]
        cost += distances[0][ant]
        if(fill>capacities[i]):
            cost += 1e10
    return cost


#Aleatory
def Genera_Vecino(solution):
  global locations
  global vehicles
  global vis
  x = rd.randrange(vehicles)
  y = rd.randrange(locations)
  z = vis[y]
  vis[y]=x
  solution[z].remove(y)
  solution[x].append(y)
  return solution


def generate_initial_solution( ):
    global vis
    global vehicles
    global locations
    vis = [-1 for y in range (locations)]
    solution=[[] for y in range(vehicles)] 
    
    #print(solution)
    for i in range(vehicles):
        y = rd.randrange(locations)
        while vis[y]!=-1: 
            y = rd.randrange(locations)
        vis[y] = i
        solution[i].append(y)

    for i in range(locations):
        y = rd.randrange(vehicles)
        #print(vis)
        if vis[i]==-1: 
            vis[i] = y
            solution[y].append(i)
    return solution
def recocido(sAct,T,L,alpha,R):
    while T > 0.0001 :
        for i in range(L):
            sCand = Genera_Vecino(sAct)
            #print(sCand)
            AE=Costo(sCand) - Costo(sAct)
            if AE >= 0:
                sAct = sCand
            else:
                proba= pow(math.e,-(-AE/(k*T)))
                if proba > R:
                   sAct = sCand 
        T=alpha*T
    return sAct


solution=np.array(vehicles)
sAct=generate_initial_solution()
print("Solución incial")
print(sAct)
start_time = time()
x=recocido(sAct,T,L,alpha,R)
elapsed_time = time() - start_time
print("Solución ")
print(x)
print("Costo minimo")
print(best_sol)
print("Mejor ruta")
print(best_route)


print("Tiempo de ejecución programa 4: %.20f seconds." % elapsed_time)
